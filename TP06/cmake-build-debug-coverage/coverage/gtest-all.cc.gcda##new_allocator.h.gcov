        -:    0:Source:/usr/include/c++/12/bits/new_allocator.h
        -:    0:Graph:/users/info/etu-2a/garnmael/R3.04/TPs/TP06/cmake-build-debug-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/users/info/etu-2a/garnmael/R3.04/TPs/TP06/cmake-build-debug-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2022 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
        -:   47:   *  @ingroup allocators
        -:   48:   *
        -:   49:   *  This is precisely the allocator defined in the C++ Standard.
        -:   50:   *    - all allocation calls operator new
        -:   51:   *    - all deallocation calls operator delete
        -:   52:   *
        -:   53:   *  @tparam  _Tp  Type of allocated object.
        -:   54:   */
        -:   55:  template<typename _Tp>
        -:   56:    class __new_allocator
        -:   57:    {
        -:   58:    public:
        -:   59:      typedef _Tp        value_type;
        -:   60:      typedef std::size_t     size_type;
        -:   61:      typedef std::ptrdiff_t  difference_type;
        -:   62:#if __cplusplus <= 201703L
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:
        -:   68:      template<typename _Tp1>
        -:   69:	struct rebind
        -:   70:	{ typedef __new_allocator<_Tp1> other; };
        -:   71:#endif
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
        -:   79:      _GLIBCXX20_CONSTEXPR
      48*:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEC2Ev:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEC2Ev called 5 returned 100% blocks executed 100%
        5:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcEC2Ev:
function _ZNSt15__new_allocatorIcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIwEC2Ev:
function _ZNSt15__new_allocatorIwEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 14 returned 100% blocks executed 100%
       14:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIdEC2Ev:
function _ZNSt15__new_allocatorIdEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEEC2Ev:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2Ev:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEC2Ev:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEEC2Ev:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEEC2Ev called 10 returned 100% blocks executed 100%
       10:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2Ev:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPcEC2Ev:
function _ZNSt15__new_allocatorIPcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEEC2Ev:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorImEC2Ev:
function _ZNSt15__new_allocatorImEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEEC2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEEC2Ev:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEEC2Ev:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEEC2Ev called 10 returned 100% blocks executed 100%
       10:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEEC2Ev:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIiEC2Ev:
function _ZNSt15__new_allocatorIiEC2Ev called 2 returned 100% blocks executed 100%
        2:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEEC2Ev:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEEC2Ev:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEEC2Ev:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEEC2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC2Ev:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   81:
        -:   82:      _GLIBCXX20_CONSTEXPR
       6*:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEC2ERKS7_:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEEC2ERKS7_ called 0 returned 0% blocks executed 0%
    #####:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEEC2ERKS3_:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEEC2ERKS3_ called 0 returned 0% blocks executed 0%
    #####:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIdEC2ERKS0_:
function _ZNSt15__new_allocatorIdEC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcEC2ERKS0_:
function _ZNSt15__new_allocatorIcEC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2ERKS4_:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS6_ called 6 returned 100% blocks executed 100%
        6:   83:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   84:
        -:   85:      template<typename _Tp1>
        -:   86:	_GLIBCXX20_CONSTEXPR
        -:   87:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   88:
        -:   89:#if __cplusplus <= 201703L
      54*:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEED2Ev:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcED2Ev:
function _ZNSt15__new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIwED2Ev:
function _ZNSt15__new_allocatorIwED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEED2Ev:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEED2Ev called 10 returned 100% blocks executed 100%
       10:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEED2Ev:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 20 returned 100% blocks executed 100%
       20:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPcED2Ev:
function _ZNSt15__new_allocatorIPcED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEED2Ev:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEED2Ev called 5 returned 100% blocks executed 100%
        5:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIdED2Ev:
function _ZNSt15__new_allocatorIdED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEED2Ev:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEED2Ev:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorImED2Ev:
function _ZNSt15__new_allocatorImED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEED2Ev:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEED2Ev called 10 returned 100% blocks executed 100%
       10:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEED2Ev:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIiED2Ev:
function _ZNSt15__new_allocatorIiED2Ev called 2 returned 100% blocks executed 100%
        2:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEED2Ev:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEED2Ev:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEED2Ev:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEED2Ev called 1 returned 100% blocks executed 100%
        1:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev called 0 returned 0% blocks executed 0%
    #####:   90:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   91:
        -:   92:      pointer
        -:   93:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      const_pointer
        -:   97:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   98:      { return std::__addressof(__x); }
        -:   99:#endif
        -:  100:
        -:  101:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  102:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  103:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  104:#else
        -:  105:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  106:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  107:#endif
        -:  108:
        -:  109:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  110:      // about what the return value is when __n == 0.
        -:  111:      _GLIBCXX_NODISCARD _Tp*
      24*:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
      24*:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  125:	      std::__throw_bad_array_new_length();
    #####:  126:	    std::__throw_bad_alloc();
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
      24*:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  138:      }
------------------
_ZNSt15__new_allocatorIdE8allocateEmPKv:
function _ZNSt15__new_allocatorIdE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv called 13 returned 100% blocks executed 62%
       13:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
       13:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
       13:  120-block  0
call    0 returned 13
branch  1 taken 0 (fallthrough)
branch  2 taken 13
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
       13:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       13:  137-block  0
call    0 returned 13
        -:  138:      }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE8allocateEmPKv:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEmPKv:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE8allocateEmPKv:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE8allocateEmPKv:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE8allocateEmPKv called 4 returned 100% blocks executed 62%
        4:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
        4:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  120-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
        4:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        4:  137-block  0
call    0 returned 4
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE8allocateEmPKv:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE8allocateEmPKv called 1 returned 100% blocks executed 62%
        1:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
        1:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  120-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
        1:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  137-block  0
call    0 returned 1
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE8allocateEmPKv:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE8allocateEmPKv:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE8allocateEmPKv:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE8allocateEmPKv called 1 returned 100% blocks executed 62%
        1:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
        1:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  120-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
        1:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  137-block  0
call    0 returned 1
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPcE8allocateEmPKv:
function _ZNSt15__new_allocatorIPcE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEmPKv:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorImE8allocateEmPKv:
function _ZNSt15__new_allocatorImE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorIiE8allocateEmPKv:
function _ZNSt15__new_allocatorIiE8allocateEmPKv called 5 returned 100% blocks executed 62%
        5:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
        5:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
        5:  120-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
        5:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        5:  137-block  0
call    0 returned 5
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE8allocateEmPKv:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####:  112:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  113:      {
        -:  114:#if __cplusplus >= 201103L
        -:  115:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  116:	// 3308. std::allocator<void>().allocate(n)
        -:  117:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  118:#endif
        -:  119:
    #####:  120:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:	  {
        -:  122:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  123:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  124:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  124-block  0
branch  0 never executed
branch  1 never executed
    #####:  125:	      std::__throw_bad_array_new_length();
    %%%%%:  125-block  0
call    0 never executed
    #####:  126:	    std::__throw_bad_alloc();
    %%%%%:  126-block  0
call    0 never executed
        -:  127:	  }
        -:  128:
        -:  129:#if __cpp_aligned_new
        -:  130:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  131:	  {
        -:  132:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  133:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  134:							   __al));
        -:  135:	  }
        -:  136:#endif
    #####:  137:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  137-block  0
call    0 never executed
        -:  138:      }
------------------
        -:  139:
        -:  140:      // __p is not permitted to be a null pointer.
        -:  141:      void
      24*:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
      24*:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      24*:  159:      }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE10deallocateEPS2_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_m:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_m:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_m called 13 returned 100% blocks executed 100%
       13:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
       13:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       13:  158-block  0
call    0 returned 13
       13:  159:      }
------------------
_ZNSt15__new_allocatorIPcE10deallocateEPS0_m:
function _ZNSt15__new_allocatorIPcE10deallocateEPS0_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS3_m:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS3_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorImE10deallocateEPmm:
function _ZNSt15__new_allocatorImE10deallocateEPmm called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE10deallocateEPS1_m:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE10deallocateEPS1_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE10deallocateEPS2_m called 4 returned 100% blocks executed 100%
        4:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
        4:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        4:  158-block  0
call    0 returned 4
        4:  159:      }
------------------
_ZNSt15__new_allocatorIiE10deallocateEPim:
function _ZNSt15__new_allocatorIiE10deallocateEPim called 5 returned 100% blocks executed 100%
        5:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
        5:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        5:  158-block  0
call    0 returned 5
        5:  159:      }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS2_m called 1 returned 100% blocks executed 100%
        1:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
        1:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  158-block  0
call    0 returned 1
        1:  159:      }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE10deallocateEPS8_m:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE10deallocateEPS8_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE10deallocateEPS2_m called 1 returned 100% blocks executed 100%
        1:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
        1:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  158-block  0
call    0 returned 1
        1:  159:      }
------------------
_ZNSt15__new_allocatorIdE10deallocateEPdm:
function _ZNSt15__new_allocatorIdE10deallocateEPdm called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEE10deallocateEPS2_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE10deallocateEPS6_m:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE10deallocateEPS6_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS5_m:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS5_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS2_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_m:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE10deallocateEPSA_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE10deallocateEPSA_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10deallocateEPSE_m:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10deallocateEPSE_m called 0 returned 0% blocks executed 0%
    #####:  142:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  143:      {
        -:  144:#if __cpp_sized_deallocation
        -:  145:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  146:#else
        -:  147:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  148:#endif
        -:  149:
        -:  150:#if __cpp_aligned_new
        -:  151:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  152:	  {
        -:  153:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  154:				     std::align_val_t(alignof(_Tp)));
        -:  155:	    return;
        -:  156:	  }
        -:  157:#endif
    #####:  158:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:      }
------------------
        -:  160:
        -:  161:#undef _GLIBCXX_SIZED_DEALLOC
        -:  162:#undef _GLIBCXX_OPERATOR_DELETE
        -:  163:#undef _GLIBCXX_OPERATOR_NEW
        -:  164:
        -:  165:#if __cplusplus <= 201703L
        -:  166:      size_type
      43*:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
      43*:  168:      { return _M_max_size(); }
------------------
_ZNKSt15__new_allocatorIiE8max_sizeEv:
function _ZNKSt15__new_allocatorIiE8max_sizeEv called 10 returned 100% blocks executed 100%
       10:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
       10:  168:      { return _M_max_size(); }
       10:  168-block  0
call    0 returned 10
------------------
_ZNKSt15__new_allocatorImE8max_sizeEv:
function _ZNKSt15__new_allocatorImE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIPcE8max_sizeEv:
function _ZNKSt15__new_allocatorIPcE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIPN7testing9TestSuiteEE8max_sizeEv:
function _ZNKSt15__new_allocatorIPN7testing9TestSuiteEE8max_sizeEv called 2 returned 100% blocks executed 100%
        2:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
        2:  168:      { return _M_max_size(); }
        2:  168-block  0
call    0 returned 2
------------------
_ZNKSt15__new_allocatorIN7testing8internal9TraceInfoEE8max_sizeEv:
function _ZNKSt15__new_allocatorIN7testing8internal9TraceInfoEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIPN7testing11EnvironmentEE8max_sizeEv:
function _ZNKSt15__new_allocatorIPN7testing11EnvironmentEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIPN7testing17TestEventListenerEE8max_sizeEv:
function _ZNKSt15__new_allocatorIPN7testing17TestEventListenerEE8max_sizeEv called 2 returned 100% blocks executed 100%
        2:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
        2:  168:      { return _M_max_size(); }
        2:  168-block  0
call    0 returned 2
------------------
_ZNKSt15__new_allocatorIPN7testing8TestInfoEE8max_sizeEv:
function _ZNKSt15__new_allocatorIPN7testing8TestInfoEE8max_sizeEv called 8 returned 100% blocks executed 100%
        8:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
        8:  168:      { return _M_max_size(); }
        8:  168-block  0
call    0 returned 8
------------------
_ZNKSt15__new_allocatorIN7testing12TestPropertyEE8max_sizeEv:
function _ZNKSt15__new_allocatorIN7testing12TestPropertyEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIN7testing14TestPartResultEE8max_sizeEv:
function _ZNKSt15__new_allocatorIN7testing14TestPartResultEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8max_sizeEv:
function _ZNKSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8max_sizeEv:
function _ZNKSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorISt6vectorIdSaIdEEE8max_sizeEv:
function _ZNKSt15__new_allocatorISt6vectorIdSaIdEEE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorIdE8max_sizeEv:
function _ZNKSt15__new_allocatorIdE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  168:      { return _M_max_size(); }
    %%%%%:  168-block  0
call    0 never executed
------------------
_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
function _ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv called 21 returned 100% blocks executed 100%
       21:  167:      max_size() const _GLIBCXX_USE_NOEXCEPT
       21:  168:      { return _M_max_size(); }
       21:  168-block  0
call    0 returned 21
------------------
        -:  169:
        -:  170:#if __cplusplus >= 201103L
        -:  171:      template<typename _Up, typename... _Args>
        -:  172:	void
      38*:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      38*:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZNSt15__new_allocatorImE9constructImJmEEEvPT_DpOT0_:
function _ZNSt15__new_allocatorImE9constructImJmEEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE9constructIS1_JRKS1_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE9constructIS1_JRKS1_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  175-block  1
    $$$$$:  175-block  2
branch  5 never executed
branch  6 never executed
    $$$$$:  175-block  3
call    7 never executed
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE9constructIS3_JRKS3_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE9constructIS1_JRKS1_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE9constructIS1_JRKS1_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  175-block  1
    $$$$$:  175-block  2
branch  5 never executed
branch  6 never executed
    $$$$$:  175-block  3
call    7 never executed
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 8 returned 100% blocks executed 100%
        8:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        8:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        8:  175-block  0
call    0 returned 8
call    1 returned 8
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 1 returned 100% blocks executed 100%
        1:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        1:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        1:  175-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  175-block  1
    $$$$$:  175-block  2
branch  5 never executed
branch  6 never executed
    $$$$$:  175-block  3
call    7 never executed
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 1 returned 100% blocks executed 100%
        1:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        1:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        1:  175-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZNSt15__new_allocatorIPcE9constructIS0_JS0_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPcE9constructIS0_JS0_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_ called 19 returned 100% blocks executed 100%
       19:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
       19:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       19:  175-block  0
call    0 returned 19
call    1 returned 19
call    2 returned 19
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE9constructIS7_JS7_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE9constructIS7_JS7_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZNSt15__new_allocatorIiE9constructIiJiEEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIiE9constructIiJiEEEvPT_DpOT0_ called 9 returned 100% blocks executed 100%
        9:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        9:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        9:  175-block  0
call    0 returned 9
call    1 returned 9
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE9constructIS2_JS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE9constructIS2_JS2_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE9constructIS4_JS4_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE9constructIS4_JS4_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE9constructISD_JS7_SC_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE9constructISD_JS7_SC_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESG_IJEEEEEvPT_DpOT0_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS8_EESG_IJEEEEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  175-block  1
    $$$$$:  175-block  2
    $$$$$:  175-block  3
branch  8 never executed
branch  9 never executed
    $$$$$:  175-block  4
call   10 never executed
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  175-block  1
    $$$$$:  175-block  2
branch  5 never executed
branch  6 never executed
    $$$$$:  175-block  3
call    7 never executed
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS6_JS6_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE9constructIS1_JS1_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE9constructIS1_JS1_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE9constructIS1_JS1_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE9constructIS1_JS1_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE9constructIS2_JS2_EEEvPT_DpOT0_:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE9constructIS2_JS2_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  173:	construct(_Up* __p, _Args&&... __args)
        -:  174:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  175:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  175-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -:  176:
        -:  177:      template<typename _Up>
        -:  178:	void
       5*:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
       5*:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE7destroyIS2_EEvPT_:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE7destroyIS2_EEvPT_:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE7destroyIS1_EEvPT_:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE7destroyIS1_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE7destroyIS3_EEvPT_:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE7destroyIS3_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE7destroyIS4_EEvPT_:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE7destroyIS4_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE7destroyIS1_EEvPT_:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE7destroyIS1_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE7destroyIS2_EEvPT_:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE7destroyIS2_EEvPT_:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE7destroyIS2_EEvPT_:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE7destroyISD_EEvPT_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE7destroyISD_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorIPcE7destroyIS0_EEvPT_:
function _ZNSt15__new_allocatorIPcE7destroyIS0_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_ called 5 returned 100% blocks executed 100%
        5:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
        5:  181:	{ __p->~_Up(); }
        5:  181-block  0
call    0 returned 5
------------------
_ZNSt15__new_allocatorImE7destroyImEEvPT_:
function _ZNSt15__new_allocatorImE7destroyImEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorIiE7destroyIiEEvPT_:
function _ZNSt15__new_allocatorIiE7destroyIiEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS6_EEvPT_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS6_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE7destroyIS7_EEvPT_:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE7destroyIS7_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE7destroyIS9_EEvPT_:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE7destroyIS9_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  179:	destroy(_Up* __p)
        -:  180:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  181:	{ __p->~_Up(); }
    %%%%%:  181-block  0
call    0 never executed
------------------
        -:  182:#else
        -:  183:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  184:      // 402. wrong new expression in [some_] allocator::construct
        -:  185:      void
        -:  186:      construct(pointer __p, const _Tp& __val)
        -:  187:      { ::new((void *)__p) _Tp(__val); }
        -:  188:
        -:  189:      void
        -:  190:      destroy(pointer __p) { __p->~_Tp(); }
        -:  191:#endif
        -:  192:#endif // ! C++20
        -:  193:
        -:  194:      template<typename _Up>
        -:  195:	friend _GLIBCXX20_CONSTEXPR bool
        -:  196:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  197:	_GLIBCXX_NOTHROW
        -:  198:	{ return true; }
        -:  199:
        -:  200:#if __cpp_impl_three_way_comparison < 201907L
        -:  201:      template<typename _Up>
        -:  202:	friend _GLIBCXX20_CONSTEXPR bool
        -:  203:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  204:	_GLIBCXX_NOTHROW
        -:  205:	{ return false; }
        -:  206:#endif
        -:  207:
        -:  208:    private:
        -:  209:      _GLIBCXX_CONSTEXPR size_type
      67*:  210:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  211:      {
        -:  212:#if __PTRDIFF_MAX__ < __SIZE_MAX__
      67*:  213:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  214:#else
        -:  215:	return std::size_t(-1) / sizeof(_Tp);
        -:  216:#endif
        -:  217:      }
        -:  218:    };
        -:  219:
        -:  220:_GLIBCXX_END_NAMESPACE_VERSION
        -:  221:} // namespace
        -:  222:
        -:  223:#endif
